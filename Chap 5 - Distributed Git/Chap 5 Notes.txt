Distributed Git

Distributed Workflows

Centralized Workflow************************

Has one repository, can accept code, and everyone syncs with it.

			repo	
	^		^		^
	developer		developer		developer

If 2 developers clone from the repo at the same time:
- the first one pushes changes without issue
- the second one must merge to first one's work before pushing

Integration-Manager Workflow***************

each developer has write access to their own public repository and read access to everyone else’s

often includes a canonical repository that represents the “official” project. 

To contribute to that project, you create your own public clone of the project and push your changes to it.

send a request to the maintainer of the main project to pull in your changes

Steps
--
1. The project maintainer pushes to their public repository.
2. A contributor clones that repository and makes changes.
3. The contributor pushes to their own public copy.
4. The contributor sends the maintainer an email asking them to pull changes.
5. The maintainer adds the contributor’s repository as a remote and merges locally.
6. The maintainer pushes merged changes to the main repository.

Contributors don’t have to wait for the project to incorporate their changes — each party can work at their own pace.

Dictator and Lieutenants Workflow********************

variant of a multiple-repository workflow

Various integration managers are in charge of certain parts of the repository; they’re called lieutenants.

All the lieutenants have one integration manager known as the benevolent dictator

The benevolent dictator pushes from his directory to a reference repository from which all the collaborators need to pull.

1] Regular developers work on their topic branch and rebase their work on top of master. 
The master branch is that of the reference repository to which the dictator pushes.

2] Lieutenants merge the developers' topic branches into their master branch.

3] The dictator merges the lieutenants' master branches into the dictator’s master branch.

4] Finally, the dictator pushes that master branch to the reference repository so the other developers can rebase on it.

not common workflow

Contributing to a project*********************************

The first variable is active contributor count — how many users are actively contributing code to this project, and how often?

Commit Guidelines
--
 Having a good guideline for creating commits and sticking to it makes working with Git and collaborating with others a lot easier. 

Check tips in Documentation/SubmittingPatches file.

submissions should not contain any whitespace errors

before you commit, run git diff --check

try to make each commit a logically separate changeset. If you can, try to make your changes digestible

split your work into at least one commit per issue with a useful message per commit

try to use git add --patch to partially stage files

This approach also makes it easier to pull out or revert one of the changesets if you need to later.

Example commit message:

Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
or "Fixes bug."  This convention matches up with commit messages generated
by commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, followed by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent

shows up better in git log --no-merges

Private small team
--
merges happen client-side rather than on the server at commit time.

Example:

1)
John, clones the repository, makes a change, and commits locally.

git clone john@githost:simplegit.git
Cloning into 'simplegit'...
cd simplegit/
vim lib/simplegit.rb
git commit -am 'remove invalid default value'

2)
Jessica, does the same thing — clones the repository and commits a change:
$ git clone jessica@githost:simplegit.git
Cloning into 'simplegit'...
...
$ cd simplegit/
$ vim TODO
$ git commit -am 'add reset task'

3)
Jessica pushes her work to the server, which works just fine
$ git push origin master
...
To jessica@githost:simplegit.git
   1edee6b..fbff5bc  master -> master

^
The basic format is <oldref>..<newref> fromref -> toref

fromref is the name of the local reference being pushed, 
and toref is the name of the remote reference being updated

4)
John makes some changes, commits them to his local repository, and tries to push them to the same server

git push origin master
To john@githost:simplegit.git
 ! [rejected]        master -> master (non-fast forward)
error: failed to push some refs to 'john@githost:simplegit.git'

John’s push fails because of Jessica’s earlier push of her changes

you must first merge the commits locally.

 John must first fetch Jessica’s upstream changes and merge them into his local repository before he will be allowed to push

$ git fetch origin
$ git merge origin/master
Test to make sure changes didn't break anything
$ git push origin master

5)
In the meantime, Jessica has created a new topic branch called issue54 with 3 commits to the branch
Has not fetched John's changes yet.

Jessica learns that John has pushed some new work to the server and she wants to take a look at it
$ git fetch origin

6)
Jessica thinks her topic branch is ready, but she wants to know what 
part of John’s fetched work she has to merge into her work so that she can push. 

$ git log --no-merges issue54..origin/master
commit 738ee872852dfaa9d6634e0dea7a324040193016
Author: John Smith <jsmith@example.com>
Date:   Fri May 29 16:01:27 2009 -0700

   remove invalid default value

log filter that asks Git to display only those commits that are on the latter branch (in this case origin/master) 
that are not on the first branch (in this case issue54)

this commit has not yet been merged

Now, Jessica can merge her topic work into her master branch, 
merge John’s work (origin/master) into her master branch, 
and then push back to the server again.

 Jessica switches back to her master branch in preparation for integrating all this work
$ git checkout master
Switched to branch 'master'
Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.

Jessica can merge either origin/master or issue54
they’re both upstream, so the order doesn’t matter

no matter which order she chooses; only the history will be different

merges issue54 first

$ git merge issue54
Updating fbff5bc..4af4298
Fast forward
 README           |    1 +
 lib/simplegit.rb |    6 +++++-
 2 files changed, 6 insertions(+), 1 deletions(-)

No problems occur; as you can see it was a simple fast-forward merge.

Now she merges withJohn's fetched work in origin/master

$ git merge origin/master
Auto-merging lib/simplegit.rb
Merge made by the 'recursive' strategy.
 lib/simplegit.rb |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

$ git push origin master
...
To jessica@githost:simplegit.git
   72bbc59..8059c15  master -> master

You work for a while (generally in a topic branch), and merge that work into your master branch when it’s ready to be integrated.
When you want to share that work, you fetch and merge your master from origin/master if it has changed,
and finally push to the master branch on the server.

=============privateSmallTeam.png=================

Private Managed Team ****************************

John and Jessica are working together on one feature (call this “featureA”), 
while Jessica and a third developer, Josie, are working on a second (say, “featureB”)

company is using a type of integration-manager workflow where the work of the individual groups is integrated only by certain engineers
the master branch of the main repo can be updated only by those engineers.

Jessica works on featureA first
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ vim lib/simplegit.rb
$ git commit -am 'add limit to log function'
[featureA 3300904] add limit to log function
 1 files changed, 1 insertions(+), 1 deletions(-)

Jessica does not have push access.

She needs to share her progress with John.

She can't push to the master repository branch so she pushes to another branch.

$ git push -u origin featureA
...
To jessica@githost:simplegit.git
 * [new branch]      featureA -> featureA

Jessica emails John to tell him that she’s pushed some work into a branch named featureA and he can look at it now. 
While she waits for feedback from John, Jessica decides to start working on featureB with Josie.

To begin, she starts a new feature branch, basing it off the server’s master branch

$ git fetch origin
$ git checkout -b featureB origin/master
Switched to a new branch 'featureB'

Now Jessica commits to the featureB branch:

$ vim lib/simplegit.rb
$ git commit -am 'made the ls-tree function recursive'
[featureB e5b0fdc] made the ls-tree function recursive
 1 files changed, 1 insertions(+), 1 deletions(-)
$ vim lib/simplegit.rb
$ git commit -am 'add ls-files'
[featureB 8512791] add ls-files
 1 files changed, 5 insertions(+), 0 deletions(-)

She’s ready to push her work, but gets an email from Josie that a branch with some initial “featureB” 
work on it was already pushed to the server as the featureBee branch. 

Jessica needs to merge those changes with her own before she can push her work to the server.

$ git fetch origin
...
From jessica@githost:simplegit
 * [new branch]      featureBee -> origin/featureBee


Assuming Jessica is still on her checked-out featureB branch, she can now merge Josie’s work into that branch with git merge:

$ git merge origin/featureBee
Auto-merging lib/simplegit.rb
Merge made by the 'recursive' strategy.
 lib/simplegit.rb |    4 ++++
 1 files changed, 4 insertions(+), 0 deletions(-)

Jessica wants to push all the merged "featureB" work back to the server.

She doesn't want to push just her featureB branch but also the featureBee branch.

She pushes featureB into featureBee

$ git push -u origin featureB:featureBee
...
To jessica@githost:simplegit.git
   fba9af8..cd685d1  featureB -> featureBee

This is called a refspec

the -u flag; this is short for --set-upstream

Jessica gets an e-mail from John asking her to look at featureA as he has pushed changes

Jessica fetches to see these changes

$ git fetch origin
...
From jessica@githost:simplegit
   3300904..aad881d  featureA   -> origin/featureA

To see a log of John's changes
she compares the nely-fetched featureA with her local copy of the same branch

git log featureA..origin/featureA
commit aad881d154acdaeb2b6b18ea0e827ed8a6d671e6
Author: John Smith <jsmith@example.com>
Date:   Fri May 29 19:57:33 2009 -0700

    changed log output to 30 from 25

Now she can merge John's new work into her local featureA branch

$ git checkout featureA
Switched to branch 'featureA'
$ git merge origin/featureA
Updating 3300904..aad881d
Fast forward
 lib/simplegit.rb |   10 +++++++++-
1 files changed, 9 insertions(+), 1 deletions(-)

now she can make whichever changes to the merged content 
commit them to her local featureA branch and push the result back to the server

$ git commit -am 'small tweak'
[featureA 774b3ed] small tweak
 1 files changed, 1 insertions(+), 1 deletions(-)
$ git push
...
To jessica@githost:simplegit.git
   3300904..774b3ed  featureA -> featureA

At this point featureA and featureBee are ready for integration into production.

The main integrator pushes to production and after a fetch the changes are reflected.
===================privateManagedTeam.png=======================

Forked Public Project ****************************
Contributing to public projects is a bit different.
you have to get the work to the maintainers some other way if you dont have permissions to push

First example uses forking

Second example is sending patches via e-mail

First clone the main repository
create a topic branch for the patch
do your work there

$ git clone <url>
$ cd project
$ git checkout -b featureA
  ... work ...
$ git commit
  ... work ...
$ git commit

use rebase -i to squash your work down to a single commit, or rearrange the work
in the commits to make the patch easier for the maintainer to review

When your branch work is finished and you’re ready to contribute it back to the maintainers, 
go to the original project page and click the “Fork” button

You then need to add this repository URL as a new remote of your local repository; in this example, let’s call it myfork:
git remote add myfork <url>

You then need to push your new work to this repository.

It’s easiest to push the topic branch you’re working on to your forked repository, rather than
merging that work into your master branch and pushing that.

if your work isn’t accepted or is cherry-picked, you don’t have to rewind your master branch

If the maintainers merge, rebase, or cherry-pick your work, you’ll eventually get it back via pulling from their repository anyhow.

Pushing your work:
git push -u myfork featureA

then you need to notify the maintainers of the original project that you have work you’d like them to merge.

This is called a pull request

The git request-pull command takes the base branch into which you want your topic branch pulled and 
the Git repository URL you want them to pull from, and produces a summary of all the changes you’re asking to be pulled. 

$ git request-pull origin/master myfork
The following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:
Jessica Smith (1):
        added a new function

are available in the git repository at:

  git://githost/simplegit.git featureA

Jessica Smith (2):
add limit to log function
      change log output to 30 from 25

 lib/simplegit.rb |   10 +++++++++-
 1 files changed, 9 insertions(+), 1 deletions(-)

If you are not the maintainer
it is easier to have a branch like master always track origin/master and do your work in topic branches that
can be discarded if they're rejected.

For example, if you want to submit a second topic of work to the project, don’t continue working on the topic branch 
you just pushed up — start over from the main repository’s master branch:

$ git checkout -b featureB origin/master
  ... work ...
$ git commit
$ git push myfork featureB
$ git request-pull origin/master myfork
  ... email generated request pull to maintainer ...
$ git fetch origin

If say the maintainer pulled in some of your patches but one did not cleanly merge, 
you can rebase that branch on top of origin/master and resolve issues and resubmit

git-rebase - Reapply commits on top of another base tip

$ git checkout featureA
$ git rebase origin/master
$ git push -f myfork featureA

Put your feature onto origin/master and fork again

you need -f to replace the featureA branch

Maintainer wants changes to the second branch.

You start a new branch based off the current origin/master branch, squash the featureB changes there, resolve any conflicts, 
make the implementation change, and then push that as a new branch:

$ git checkout -b featureBv2 origin/master
$ git merge --squash featureB
  ... change implementation ...
$ git commit
$ git push myfork featureBv2

The --squash option takes all the work on the merged branch and squashes
 it into one changeset producing the repository state as if a real merge happened, without actually making a merge commit.

This means your future commit will have one parent only and allows you to introduce all the changes from another
 branch and then make more changes before recording the new commit

 --no-commit option can be useful to delay the merge commit in case of the default merge process

Now notify the maintainer that you’ve made the requested changes, and that they can find those changes in your featureBv2 branch

Public Project over Email******************************************

you create topic branches for each patch series you work on. 
The difference is how you submit them to the project. Instead of forking the project and pushing to your own
 writable version, you generate email versions of each commit series and email them to the developer mailing list:

$ git checkout -b topicA
  ... work ...
$ git commit
  ... work ...
$ git commit

Now you have two commits that you want to send to the mailing list. 
You use git format-patch to generate the mbox-formatted files that you can email to the list 
turns each commit into an email message

$ git format-patch -M origin/master
0001-add-limit-to-log-function.patch
0002-changed-log-output-to-30-from-25.patch

format-patch command prints out the names of the patch files it creates
-M switch tells Git to look for renames

...read into if needed

Maintaining a Projct*************************************************

This can consist of accepting and applying patches generated via format-patch and emailed to you, or integrating
 changes in remote branches for repositories you’ve added as remotes to your project

When you’re thinking of integrating new work, it’s generally a good idea to try it out in a topic branch

As you’ll remember, you can create the branch based off your master branch like this:
$ git branch sc/ruby_client master

Checking Out Remote Branches

if Jessica sends you an email saying that she has a great new feature in the ruby-client branch of her repository,
 you can test it by adding the remote and checking out that branch locally:

$ git remote add jessica git://github.com/jessica/myproject.git
$ git fetch jessica
$ git checkout -b rubyclient jessica/ruby-client


$ git log contrib --not master

To see what changes each commit introduces, remember that you can pass the -p 
option to git log and it will append the diff introduced to each commit.

To see a full diff of what would happen if you were to merge this topic branch with another branch
$ git diff master

more reading if needed....

Tagging Your Releases**************************************

When you’ve decided to cut a release, you’ll probably want to assign a tag so you can re-create that release at any point going forward.

 git tag -s v1.5 -m 'my signed 1.5 tag'
You need a passphrase to unlock the secret key for
user: "Scott Chacon <schacon@gmail.com>"
1024-bit DSA key, ID F721C45A, created 2009-02-09

you can figure out which key you want by running gpg --list-keys:

$ gpg --list-keys
/Users/schacon/.gnupg/pubring.gpg
---------------------------------
pub   1024D/F721C45A 2009-02-09 [expires: 2010-02-09]
uid                  Scott Chacon <schacon@gmail.com>
sub   2048g/45D02282 2009-02-09 [expires: 2010-02-09]

Then, you can directly import the key into the Git database by exporting it and piping that through git hash-object, 
which writes a new blob with those contents into Git and gives you back the SHA-1 of the blob:

$ gpg -a --export F721C45A | git hash-object -w --stdin
659ef797d181633c87ec71ac3f9ba29fe5775b92

Now that you have the contents of your key in Git, you can create a tag that points directly to it by specifying the 
new SHA-1 value that the hash-object command gave you:
$ git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92

Now  run git push --tags

If anyone wants to verify a tag, they can directly import your PGP key by pulling the blob directly out of the database and importing it into GPG

$ git show maintainer-pgp-pub | gpg --import






































































