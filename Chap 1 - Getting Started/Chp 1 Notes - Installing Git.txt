Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.

It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes
 over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.

The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data.

Conceptually, most other systems store information as a list of file-based changes.

Git thinks of its data more like a series of snapshots of a miniature filesystem.

With Git, every time you commit, or save the state of your project, Git basically takes a picture of what all your files look like 
at that moment and stores a reference to that snapshot.

 if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored.

This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it,

to browse the history of the project, Git doesn’t need to go out to the server to get the history and display it for you — 
it simply reads it directly from your local database. 

Most operations in Git need only local files and resources to operate — generally no information is needed 
from another computer on your network.

Everything in Git is checksummed before it is stored and is then referred to by that checksum.
This means it’s impossible to change the contents of any file or directory without Git knowing about it.

Git stores everything in its database not by file name but by the hash value of its contents.

Git has three main states that your files can reside in: 
modified, 
taged, 
and committed

Modified means that you have changed the file but have not committed it to your database yet.

Staged means that you have marked a modified file in its current version to go into your next commit snapshot.

Committed means that the data is safely stored in your local database.

The basic Git workflow goes something like this:
You modify files in your working tree.

You selectively stage just those changes you want to be part of your 
next commit, which adds only those changes to the staging area.

You do a commit, which takes the files as they are in the staging 
area and stores that snapshot permanently to your Git directory.

If a particular version of a file is in the Git directory, it’s considered committed. 
If it has been modified and was added to the staging area, it is staged. 
And if it was changed since it was checked out but has not been staged, it is modified.

git config --list --show-origin
views all settings

$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
sets identity





