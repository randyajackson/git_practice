Distributed Git

Distributed Workflows

Centralized Workflow************************

Has one repository, can accept code, and everyone syncs with it.

			repo	
	^		^		^
	developer		developer		developer

If 2 developers clone from the repo at the same time:
- the first one pushes changes without issue
- the second one must merge to first one's work before pushing

Integration-Manager Workflow***************

each developer has write access to their own public repository and read access to everyone else’s

often includes a canonical repository that represents the “official” project. 

To contribute to that project, you create your own public clone of the project and push your changes to it.

send a request to the maintainer of the main project to pull in your changes

Steps
--
1. The project maintainer pushes to their public repository.
2. A contributor clones that repository and makes changes.
3. The contributor pushes to their own public copy.
4. The contributor sends the maintainer an email asking them to pull changes.
5. The maintainer adds the contributor’s repository as a remote and merges locally.
6. The maintainer pushes merged changes to the main repository.

Contributors don’t have to wait for the project to incorporate their changes — each party can work at their own pace.

Dictator and Lieutenants Workflow********************

variant of a multiple-repository workflow

Various integration managers are in charge of certain parts of the repository; they’re called lieutenants.


