Git is smart enough to figure out what commit you’re referring to
 if you provide the first few characters of the SHA-1 hash
*at least 4 characters

$ git log
commit 734713bc047d87bf7eac9674765ae793478c50d3
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Jan 2 18:32:33 2009 -0800

    fixed refs handling, added gc auto, updated tests

commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs'

commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 14:58:32 2008 -0800

    added some blame and merge stuff

In this case, say you’re interested in the commit whose hash begins with 1c002dd.... 
You can inspect that commit with any of the following variations of git show
 (assuming the shorter versions are unambiguous):

$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b
$ git show 1c002dd4b536e7479f
$ git show 1c002d

rev-parse exists for lower-level operations and isn’t designed to be used in day-to-day operations

Here you can run rev-parse on your branch.
$ git rev-parse topic1
ca82a6dff817ec66f44342007202690a93763949

to see where your master branch was yesterday, you can type
$ git show master@{yesterday}
That would show you where tip of your master branch was yesterday.

--

 ^ (caret) at the end of a reference, Git resolves it to mean the parent of that commit

$ git log --pretty=format:'%h %s' --graph
* 734713b fixed refs handling, added gc auto, updated tests
*   d921970 Merge commit 'phedders/rdocs'
|\
| * 35cfb2b Some rdoc changes
* | 1c002dd added some blame and merge stuff
|/
* 1c36188 ignore *.gem
* 9b29157 add open3_detach to gemspec file list

$ git show HEAD^
commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs'

d921970^2 means “the second parent of d921970.”

--

Commit ranges
“What work is on this branch that I haven’t yet merged into my main branch?”

double-dot syntax
asks Git to resolve a range of commits that are reachable from 
one commit but aren’t reachable from another.

A < B < E < F <-master
          < C < D <- experiment

“all commits reachable from experiment that aren’t reachable from master.”

$ git log master..experiment
D
C

$ git log experiment..master
F
E

double dot is shorthand, can also use for multiple points

$ git log refA..refB
$ git log ^refA refB
$ git log refB --not refA

triple-dot syntax, which specifies all the commits that are reachable 
by either of two references but not by both of them.

$ git log master...experiment
F
E
D
C

$ git log --left-right master...experiment
< F
< E
> D
> C

Lets you see which side of the range each commit is in.

Interactive staging *************

git add -i uses an interactive shell mode

$ git add -i
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb

*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now>

Using option 'u' or 'update'

What now> u
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>

You enter 1 and 2

Update>> 1,2
           staged     unstaged path
* 1:    unchanged        +0/-1 TODO
* 2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>

Update>>
updated 2 paths

Now the two files are staged.

*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> s
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb

If you want to unstage, you would use the 'r' option to revert.

*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> r
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> 1
           staged     unstaged path
* 1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> [enter]
reverted one path

*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> s
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb

Option 6 shows the difference of the staged files.
much like specifying git diff --cached on the command line:

use 6 and review diff>> is the number of the file.

Stashing and cleaning **********************************

Stashing takes the dirty state of your working directory — that is,
 your modified tracked files and staged changes —
 and saves it on a stack of unfinished changes that you can reapply 
at any time (even on a different branch).

Example use:

You use git status.
Now you want to switch branches but you don't want to commit yet so you stash the changes.

you run:
git stash
or
git stash push

Now when you run git status it shows as up to date.

to see stashes, use git stash list

reapply by using git stash apply

or apply by name using "git stash apply stash@{2}"

git stash apply --index 
tries to reapply the staged changes.

$ git stash apply --index
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   index.html

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   lib/simplegit.rb

apply option only tries to apply the stashed work, it is still on the stack.
to drop it you can run git stash drop.

git stash --keep-index tells Git to not only include all staged content in the stash being created
but to also leave it in the index.

$ git status -s
M  index.html
 M lib/simplegit.rb

$ git stash --keep-index
Saved working directory and index state WIP on master: 1b65b17 added the index file
HEAD is now at 1b65b17 added the index file

$ git status -s
M  index.html

stash can also stash the untracked files as well as the tracked ones

By default, git stash will stash only modified and staged tracked files.

--include-untracked or -u will include untracked files

to stash all files use -a

--patch prompts for which changes you want to stash or keep in working directory

$ git stash --patch
diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index 66d332e..8bb5674 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -16,6 +16,10 @@ class SimpleGit
         return `#{git_cmd} 2>&1`.chomp
       end
     end
+
+    def show(treeish = 'master')
+      command("git show #{treeish}")
+    end

 end
 test
Stash this hunk [y,n,q,a,d,/,e,?]? y

Saved working directory and index state WIP on master: 1b65b17 added the index file

Creating a branch from a stash
-----------------------

If you want an easier way to test the stashed changes again, you can run git stash branch <new branchname>, 
which creates a new branch for you with your selected branch name, checks out the commit you were on when 
you stashed your work, reapplies your work there, and then drops the stash if it applies successfully:

$ git stash branch testchanges
M	index.html
M	lib/simplegit.rb
Switched to a new branch 'testchanges'
On branch testchanges
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   index.html

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   lib/simplegit.rb

Dropped refs/stash@{0} (29d385a81d163dfd45a452a2ce816487a6b8b014)

Cleaning your Working Directory
------------------------

You may not want to stash some work or files in working directory but get rid of them.
That is what git clean is for.

git clean is designed to get rid of files in the working directory that are not tracked.

git stash --all
removes all untracked items but stores them in a stash.

$ git clean -d -n
Would remove test.o
Would remove tmp/

using -n runs a dry run
 “do a dry run and tell me what you would have removed”

git clean command will only remove untracked files that are not ignored

-x will also delete files mentioned in the gitignore file

$ git status -s
 M lib/simplegit.rb
?? build.TMP
?? tmp/

$ git clean -n -d
Would remove build.TMP
Would remove tmp/

$ git clean -n -d -x
Would remove build.TMP
Would remove test.o
Would remove tmp/

if you don't know what git clean is going to do, run it with a -n flag to get a readout of its intentions

Signing your work
---------------

 if you want to sign anything you need to get GPG configured and your personal key installed.

$ gpg --list-keys
/Users/schacon/.gnupg/pubring.gpg
---------------------------------
pub   2048R/0A46826A 2014-06-04
uid                  Scott Chacon (Git signing key) <schacon@gmail.com>
sub   2048R/874529A9 2014-06-04

read if needed..........

Solution to use if working on an open source product and want to verify the identities of the contributors

You can withold merges from individuals without keys.

Searching
--------
Git ships with a command called grep that allows you to easily search through any committed tree, 
the working directory, or even the index for a string or regular expression.

git grep -n <search string>

prints out line numbers where the search string is located

git grep summarizes the output  by showing you only which files contained
 the search string and how many matches there were in each file with the -c option

git grep -c and                                
Chap 1 - Getting Started/Chp 1 Notes - Installing Git.txt:9                            
 Chap 2 - Git Basics/Chp 2 Notes - Git Basics.txt:38                                     
Chap 3 - Git branching/Chap 3 Notes.txt:53                                             
 Chap 4 - Git on the server/Chap 4 Notes.txt:19                                          
Chap 5 - Distributed Git/Chap 5 Notes.txt:52                                            
Chap 6 - GitHub/Chap 6 Notes.txt:2                                                      
Chap 7 - Git Tools/Chap 7 Notes.txt:27        

git grep -p <search string> <filename> (or *.txt, *.js, etc)

display the enclosing method or function for each matching string


look for any lines that define a constant whose name contains either of the substrings “LINK” or “BUF_MAX”

$ git grep --break --heading \
    -n -e '#define' --and \( -e LINK -e BUF_MAX \) v1.8.0
v1.8.0:builtin/index-pack.c
62:#define FLAG_LINK (1u<<20)

v1.8.0:cache.h
73:#define S_IFGITLINK  0160000
74:#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)

v1.8.0:environment.c
54:#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKS

v1.8.0:strbuf.c
326:#define STRBUF_MAXLINK (2*PATH_MAX)

v1.8.0:symlinks.c
53:#define FL_SYMLINK  (1 << 2)

v1.8.0:zlib.c
30:/* #define ZLIB_BUF_MAX ((uInt)-1) */
31:#define ZLIB_BUF_MAX ((uInt) 1024 * 1024 * 1024) /* 1GB */

Git Log Searching
--------------

find out when the ZLIB_BUF_MAX constant was originally introduced

-S is referred to as the "pickaxe" option
shows only commits that changed the number of occurences of the string

$ git log -S ZLIB_BUF_MAX --oneline
e01503b zlib: allow feeding more than 4GB in one go
ef49a7a zlib: zlib can only process 4GB at a time

If we look at the diff of those commits, we can see that in ef49a7a the constant was introduced and in e01503b it was modified.

Line Log Searching
---------------

git log -L shows the history of a function or line of code

every change made to the function git_deflate_bound in the zlib.c file

$ git log -L :git_deflate_bound:zlib.c
commit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:52:15 2011 -0700

    zlib: zlib can only process 4GB at a time

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -85,5 +130,5 @@
-unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+unsigned long git_deflate_bound(git_zstream *strm, unsigned long size)
 {
-       return deflateBound(strm, size);
+       return deflateBound(&strm->z, size);
 }


commit 225a6f1068f71723a910e8565db4e252b3ca21fa
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:18:17 2011 -0700

    zlib: wrap deflateBound() too

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -81,0 +85,5 @@
+unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+{
+       return deflateBound(strm, size);
+}
+

Rewriting History
--------------

you can rewrite commits that already happened so they look like they happened in a different way.

you have a great deal of freedom to rewrite your history locally

avoid pushing your work until you’re happy with it and ready to share it with the rest of the world.

Changing the last commit
---------------------

Changing last commit MESSAGE ONLY

$ git commit --amend

The command above loads the previous commit message into an editor session, 
where you can make changes to the message, save those changes and exit

Changing last commit CONTENT

make all changes that are meant to be changed

git commit --amend

replaces last comit with the updated files

amending changes changes the SHA-1 of the commit

To make changes beyond the last commit, use rebase*************************

For example, if you want to change the last three commit messages

$ git rebase -i HEAD~3


Reordering Commits
----------------
use git log --pretty

to obtain the commit hashes

use git rebase -i

reorder the comments in the text editor, example:

change from:
pick f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added cat-file

change to:
pick 310154e updated README formatting and added blame
pick f7f3f6d changed my name a bit

when you close the editor the commits will change order

Squashing commits
---------

use

pick f7f3f6d changed my name a bit
squash 310154e updated README formatting and added blame
squash a5f4a0d added cat-file

after save and exit,
another editor arrives to verify the merge

Splitting commits
-----------
pick f7f3f6d changed my name a bit
edit 310154e updated README formatting and added blame
pick a5f4a0d added cat-file

after the text editor exits:

$ git reset HEAD^
$ git add README
$ git commit -m 'updated README formatting'
$ git add lib/simplegit.rb
$ git commit -m 'added blame'
$ git rebase --continue

$ git log -4 --pretty=format:"%h %s"
1c002dd added cat-file
9b29157 added blame
35cfb2b updated README formatting
f3cc40e changed my name a bit

Filter branch
-----------

To remove a file named passwords.txt from your entire history, 
you can use the --tree-filter option to filter-branch

$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD


******************************************************************
An easier way to think about reset and checkout is through the 
mental frame of Git being a content manager of three different trees.

Tree			Role
HEAD			Last commit snapshot, next parent
Index			Proposed next commit snapshot
Working Directory		Sandbox

HEAD is the pointer to the current branch reference
which is in turn a pointer to the last commit made on that branch.

HEAD as the snapshot of your last commit on that branch

----

The index is your proposed next commit
Git’s “Staging Area”



----

Think of the working directory as a sandbox, where you can try changes
 out before committing them to your staging area (index) and then to history.

$tree
Folder PATH listing for volume UserData
Volume serial number is 002A-2985
\\slg\RedirectedFolders$.
├───Chap 1 - Getting Started
├───Chap 2 - Git Basics
├───Chap 3 - Git branching
├───Chap 4 - Git on the server
├───Chap 5 - Distributed Git
├───Chap 6 - GitHub
├───Chap 7 - Git Tools
└───learngitbranching.js.org notes

----

The Workflow

working directory		index		HEAD
	|<--------------|--------------- | checkout the project
	|-------------->|		| stage files
	|		|-------------->| commit

You go into a directory with a single file in it.

At this point, the file resides in the working directory.

Now in the directory you call git init.
You now have a HEAD element pointing to an unborn MASTER branch.

Head and Index are both empty upon git init.

Now you use git add on the directory.
Index now has the file and working directory has a copy of the file.

Now you use git commit on the directory.
Contents of the index are now saved in a permanent snapshot.
A commit object is created which points to that snapshot.
Master now points to that commit.

git status now shows no changes because:
working directory = index = HEAD

Now a change is made to the file.

git status now shows a change since:
working directory has v2
index has v1
HEAD has v1

git add now shows:
working directory has v2
index has v2
HEAD has v1

after git commit:
working directory has v2
index has v2
HEAD has v2

git reset will move HEAD to the version you tell it to so for example:
working directory has v3
index has v3
HEAD has v2

This is like undoing the last commit.








































































































